{"meta":{"title":"傻瓜|无情","subtitle":"岁月不饶人,我亦未曾饶过岁月","description":"当一天和尚敲一天钟","author":"肖无情","url":"http://my.com","root":"/"},"pages":[{"title":"第一批","date":"2019-10-26T00:43:01.524Z","updated":"2019-10-24T16:11:22.468Z","comments":true,"path":"categories/hello-world.html","permalink":"http://my.com/categories/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"文章分类","date":"2019-10-26T00:32:28.000Z","updated":"2019-10-29T15:48:08.546Z","comments":true,"path":"categories/index.html","permalink":"http://my.com/categories/index.html","excerpt":"","text":""},{"title":"第一批","date":"2019-10-26T00:43:03.822Z","updated":"2019-10-24T16:11:22.468Z","comments":true,"path":"archives/hello-world.html","permalink":"http://my.com/archives/hello-world.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"title":"categories","date":"2019-10-29T15:44:36.000Z","updated":"2019-10-29T15:45:21.023Z","comments":true,"path":"categories/index-1.html","permalink":"http://my.com/categories/index-1.html","excerpt":"","text":""},{"title":"标签","date":"2019-10-26T00:32:28.000Z","updated":"2019-10-26T01:20:37.077Z","comments":true,"path":"tags/index.html","permalink":"http://my.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Flutter/Flutter 基本语法","slug":"Flutter/Flutter 基本语法","date":"2019-11-05T16:05:00.890Z","updated":"2019-11-05T16:14:14.115Z","comments":true,"path":"2019/11/06/Flutter/Flutter 基本语法/","link":"","permalink":"http://my.com/2019/11/06/Flutter/Flutter%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Final and const如果你以后不打算修改一个变量，使用 final 或者 const。 一个 final 变量只能赋值一次；一个 const 变量是编译时常量。 （Const 变量同时也是 final 变量。） 顶级的 final 变量或者类中的 final 变量在 第一次使用的时候初始化。 注意： 实例变量可以为 final 但是不能是 const 。 const 变量为编译时常量。 如果 const 变量在类中，请定义为 static const。 可以直接定义 const 和其值，也 可以定义一个 const 变量使用其他 const 变量的值来初始化其值。 const 关键字不仅仅只用来定义常量。 有可以用来创建不变的值， 还能定义构造函数为 const 类型的，这种类型 的构造函数创建的对象是不可改变的。任何变量都可以有一个不变的值。 12345678910111213// Note: [] creates an empty list.// const [] creates an empty, immutable list (EIA).var foo = const []; // foo is currently an EIA.final bar = const []; // bar will always be an EIA.const baz = const []; // baz is a compile-time constant EIA.// You can change the value of a non-final, non-const variable,// even if it used to have a const value.foo = [];// You can't change the value of a final or const variable.// bar = []; // Unhandled exception.// baz = []; // Unhandled exception. Built-in types(内置的类型)Dart 内置支持下面这些类型： numbers strings booleans lists (也被称之为 arrays) maps runes (用于在字符串中表示 Unicode 字符) symbols Numbers（数值）Dart 支持两种类型的数字： int 整数值，其取值通常位于 -253 和 253 之间。 double 64-bit (双精度) 浮点数，符合 IEEE 754 标准。 int 和 double 都是 num 的子类 字符串和数字之间转换的方式：123456789101112131415// String -&gt; intvar one = int.parse('1');assert(one == 1);// String -&gt; doublevar onePointOne = double.parse('1.1');assert(onePointOne == 1.1);// int -&gt; StringString oneAsString = 1.toString();assert(oneAsString == '1');// double -&gt; StringString piAsString = 3.14159.toStringAsFixed(2);assert(piAsString == '3.14'); ==操作符判断两个对象的内容是否一样。 如果两个字符串包含一样的字符编码序列， 则他们是相等的 三个单引号或者双引号也可以 创建多行字符串对象1234567var s1 = '''You can createmulti-line strings like this one.''';var s2 = \"\"\"This is also amulti-line string.\"\"\"; 有疑问？那r到底是什么通过提供一个 r 前缀可以创建一个 “原始 raw” 字符串：1var s = r\"In a raw string, even \\n isn't special.\"; 字符串字面量是编译时常量， 带有字符串插值的字符串定义，若干插值表达式引用的为编译时常量则其结果也是编译时常量","categories":[],"tags":[]},{"title":"关键字","slug":"关键字","date":"2019-11-05T15:27:50.245Z","updated":"2019-11-05T16:04:08.193Z","comments":true,"path":"2019/11/05/关键字/","link":"","permalink":"http://my.com/2019/11/05/%E5%85%B3%E9%94%AE%E5%AD%97/","excerpt":"","text":"final 最终，完结器，java中可以使用final 关键字声明类、属性、方法； 声明时注意 使用final声明的类不能有子类 final 申明的方法不能被子类覆写 使用final申明的变量即为常量，常量不可以被修改 static 使用static声明的属性，则此属性被称为全局属性（静态属性） 类方法 非static申明的方法可以调用static声明的属性或方法，但是，static声明的方法不能调用非static声明的属性或方法","categories":[],"tags":[]},{"title":"Flutter/Flutter语法","slug":"Flutter/Flutter语法","date":"2019-11-04T14:59:41.483Z","updated":"2019-11-05T15:24:09.477Z","comments":true,"path":"2019/11/04/Flutter/Flutter语法/","link":"","permalink":"http://my.com/2019/11/04/Flutter/Flutter%E8%AF%AD%E6%B3%95/","excerpt":"","text":"final和constfinal和const 关键字用于声明不可变的(其实final是变量只能赋值一次)。不能修改使用final 或const 关键字声明的变量的值。 共同点 声明时类型可以省略，一旦赋值不能再重新复制 12345final String a = &apos;abc&apos;;final a = &apos;abc&apos;;const String a = &apos;abc&apos;;const a = &apos;abc&apos;; 不能和var同时使用 ![image-20191104231659210](/Users/xfq/Library/Application Support/typora-user-images/image-20191104231659210.png) 区别 区别一final 是单赋值，只能赋值一次，一旦赋值就不能再次修改 const 是声明时赋值，一经声明就不能再修改 1234final name; // 无类型注释final String nickname = &apos;Bobby&apos;; // 类型注释 Stringname = &apos;Bob&apos;; // 赋值第一次name = &apos;Alice&apos;; //错误：final变量 只能设置一次 const 是编译时常量，其值在编译时确定,必须在声明处赋值 final变量与类变量在首次访问时才执行初始化 12345678910111213final name = getName();String getName() &#123; print(&apos;getName&apos;); return &apos;bob&apos;;&#125;const String nickname = &apos;Bobby&apos;;main() &#123; print(nickname); print(name)&#125; 运行结果 123BobbygetNamebob final 变量在没有访问时，是不会自动进行赋值的。所以并没有 打印出 getName。等到访问name变量时才调用 getName() 函数进行赋值。 区别二当const用在=左边时，其作用是 *声明变量常量，它要求 *必须在声明变量时赋值，一旦赋值就不允许修改，而声明值一定要是编译时常数。 编译常量 表达式。表达式的所有值都是编译时可知的。 1234void main() &#123; const a = 1; const b = a &gt; 1 ? 2 : 1;&#125; const用在等号右边 当const用在=右边，其作用是 修饰值，它意味着对象的整个深度状态可以在编译时完全确定，并且对象将被冻结并且完全不可变。 一般用于修饰集合，它要求两点： 集合的元素必须是递归的编译时常数 12345oid main() &#123; var c = 2; //ERROR, 集合元素必须是编译时常数。 var a = const [c,2,3];&#125; 不允许对集合做任何改变。 12345void main() &#123; const a = const [1,2,3]; //ERROR, 不允许修改。 a[1] = 2;&#125; const修饰类的构造函数 当const修饰类的构造函数时，它要求该类的所有成员都必须是final的。 123456789101112class ConstObject &#123; final value; //ERROR, 必须是 final 变量。 int value2; const ConstObject(this.value); log() &#123; print(value); &#125;&#125; 创建和设置const 常量： 12const String nickname = 'Bobby';nickname = 'Alice'; // 错误：const变量不能再次赋值； const 关键字不只是用于声明常量，还可以用它来创建常量值；以及声明创建常量值的构造函数。任何变量都可以具有常量值。 例如： 123var foo = const [];foo = [1, 2, 3]; // 第一次赋值；foo = [2, 3, 4]; // 错误： const变量不能再次赋值； 如果是 final 变量就不能再次赋值： 12final bar = const [];bar = [1, 2, 3]; // 错误：final变量 只能设置一次 finalfinal的要求就是 其声明的变量在赋值之后就不再改变，它并不要求=的右边是编译时常数。 final有两种场景： 文件中的变量声明：必须在声明时赋值。 类的成员变量声明：可以在声明时赋值，也可以通过构造函数赋值语法糖ClassV({this.a})，或者初始化列表的方式赋值。 总结2.1 const 声明类成员变量时，const变量必须同时被声明为static的。 const变量，变量命名方式应使用全大写加下划线。 const变量只能在定义的时候初始化。 2.2 final final变量可以在构造函数参数列表或者初始化列表中初始化。 2.3 static 在文件中，变量不能声明为static。 2.4实例变量可以是final 不可能是const最终实例变量必须在构造函数主体开始之前初始化， 那么为什么呢？ const必须在声明的时候就初始化，那实例对象初始化也没有什么意义，final至少可以赋值一次","categories":[],"tags":[]},{"title":"android studio 常用快捷键","slug":"android studio 常用快捷键","date":"2019-11-03T09:19:12.007Z","updated":"2019-11-03T09:19:12.008Z","comments":true,"path":"2019/11/03/android studio 常用快捷键/","link":"","permalink":"http://my.com/2019/11/03/android%20studio%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"Android Studio常用操作 文本替换 全文文本替换 command + shift +r 文件内文本替换 command + r 一次性修改同一文件中所有搜索到的文字 command+control+g 文本查找 全文文本查找 command + shift +f 文件内文本查找 command + f 查找下一个 command + g 查找上一个 command + shift + g 代码格式整理 代码对其整理 command + option +L","categories":[],"tags":[]},{"title":"Typora 简单使用","slug":"Typora 简单使用","date":"2019-11-03T02:48:29.534Z","updated":"2019-11-03T04:06:42.415Z","comments":true,"path":"2019/11/03/Typora 简单使用/","link":"","permalink":"http://my.com/2019/11/03/Typora%20%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Typora的简单使用 mac[TOC] 标题command+ 数字（1、2….6） 下划线command+u 下划线 删除线删除线 123456 qqq 加粗command+b 斜体这里是斜体 链接command + k 引用 引用直接使用 &gt; 这里又是一个 &gt; 表格 command + option + t 代码块 code 前面三个 ``` 后面三个 其他内容查看 https://www.jianshu.com/p/092de536d948","categories":[],"tags":[]},{"title":"抓包原理","slug":"抓包原理","date":"2019-11-03T02:45:27.000Z","updated":"2019-11-03T04:12:16.553Z","comments":true,"path":"2019/11/03/抓包原理/","link":"","permalink":"http://my.com/2019/11/03/%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"context的理解","slug":"context的理解","date":"2019-11-01T15:12:18.000Z","updated":"2019-11-03T04:07:16.360Z","comments":true,"path":"2019/11/01/context的理解/","link":"","permalink":"http://my.com/2019/11/01/context%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"","text":"理解成创建widget的上下文就可以了。context实际是element，是为了阻止直接对element操作而抽象出来的一个概念","categories":[],"tags":[]},{"title":"设计模式之工厂模式","slug":"设计模式之工厂模式","date":"2019-10-29T15:32:46.000Z","updated":"2019-10-29T16:14:18.878Z","comments":false,"path":"2019/10/29/设计模式之工厂模式/","link":"","permalink":"http://my.com/2019/10/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"###工厂模式（Factory Pattern） 工厂模式（Factory Pattern）创建型模式，提供一种应用于创建对象的方法","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://my.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://my.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"静态变量和全局变化","slug":"静态变量和全局变化","date":"2019-10-26T11:01:37.000Z","updated":"2019-10-26T11:07:10.308Z","comments":false,"path":"2019/10/26/静态变量和全局变化/","link":"","permalink":"http://my.com/2019/10/26/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E5%8C%96/","excerpt":"","text":"#位置一 12345678位置1：NSInteger cellHeight = 100;@interface MMMMPeople : NSObject位置2：NSInteger cellHeight = 100;@end位置3：NSInteger cellHeight = 100; 位置二报错：Cannot declare variable inside @interface or @protocol```123.m中同样 （略） 位置1：NSInteger cellHeight = 100;@interface ViewController ()位置2：NSInteger cellHeight = 100;@end位置3：NSInteger cellHeight = 100; @implementation ViewController位置4：NSInteger cellHeight = 100; (void)functionA { }位置5：NSInteger cellHeight = 100; 1```位置2 报错：Cannot declare variable inside @interface or @protocol ######同一个工程中，两个不同 .m 文件中同样的全局变量不能同时存在，因为这样在编译或运行的时候，编译器分不清是哪个全局变量，所以我们千万不能同时在同一个工程中定义同样的全局变量！ 如果我就是想用另一个 .m 文件中的全局变量，那怎么处理呢？很简单，使用关键字 extern 修饰使用的全局变量就好了， 123456789extern NSInteger CellHeight;打印结果：0。因为当没有初始化的时候系统默认：零。 注：如果在MMMMPeople中初始化了数据，比如NSInteger CellHeight = 100；则打印结果就为100，但是在ViewController中就不能再次初始化！！！否则编译报错同上！！！#&apos;extern&apos; variable has an initializer#但是可以全局修改 cellHeight = 300; NSLog(@&quot;cellHeight ===== %ld&quot;,(long)cellHeight); -----&gt;300 静态全局变量同样不能在 2的位置声明 否则位置2 报错：Cannot declare variable inside @interface or @protocol extern想使用它，但还是不行的，静态全局变量只能在本文件中使用 #全局变量与全局静态变量的区别： (a）若程序由一个源文件构成时，全局变量与全局静态变量没有区别。(b)若程序由多个源文件构成时，全局变量与全局静态变量不同：全局静态变量使得该变量成为定义该变量的源文件所独享，即：全局静态变量对组成该程序的其它源文件是无效的 ,全局变量可以通过：extern。(c)具有外部链接（#import 会把变量和方法全部导入过去如果A中#import “B” B 中有static aa 那A中已经有了static aa 如果A修改aa其实修改的就是B中的aa）的静态；可以在所有源文件里调用并修改! 全局变量除了本文件，其他文件可以通过extern的方式引用；比如：在.h中声明了 且导入了头文件 在.m中声明了 且导入了头文件 (d)静态（static）不能使用 extern并存，(e)可以虽然不报错，但是违背了static 的初衷 ？static的左右就是在文件内部使用 来源 https://blog.csdn.net/mango_ios/article/details/52686892","categories":[{"name":"基础","slug":"基础","permalink":"http://my.com/categories/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"编程基础","slug":"编程基础","permalink":"http://my.com/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"}]},{"title":"第一批","slug":"hello-world","date":"2019-10-22T17:36:27.715Z","updated":"2019-10-24T16:11:22.468Z","comments":true,"path":"2019/10/23/hello-world/","link":"","permalink":"http://my.com/2019/10/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}