<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>傻瓜|无情</title>
  
  <subtitle>岁月不饶人,我亦未曾饶过岁月</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://my.com/"/>
  <updated>2019-11-10T15:55:54.751Z</updated>
  <id>http://my.com/</id>
  
  <author>
    <name>肖无情</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://my.com/2019/11/09/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://my.com/2019/11/09/git常用命令/</id>
    <published>2019-11-09T08:13:28.000Z</published>
    <updated>2019-11-10T15:55:54.751Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="1、版本库"><a href="#1、版本库" class="headerlink" title="1、版本库"></a>1、版本库</h2><h3 id="创建版本库（文件夹）"><a href="#创建版本库（文件夹）" class="headerlink" title="创建版本库（文件夹）"></a>创建版本库（文件夹）</h3><figure class="highlight plain"><figcaption><span>mkdir lerangit```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">进入到该目录下</span><br><span class="line"></span><br><span class="line">``` $ cd learngit</span><br></pre></td></tr></table></figure><p>查看文件路径</p><figure class="highlight plain"><figcaption><span>pwd ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; /Users/xfq/Desktop/learngit</span><br><span class="line"></span><br><span class="line">### 初始化版本库git init</span><br><span class="line"></span><br><span class="line"> 通过`git init`命令把这个目录变成Git可以管理的仓库</span><br><span class="line"></span><br><span class="line">```$git init</span><br></pre></td></tr></table></figure><blockquote><p>Initialized empty Git repository in /Users/xfq/Desktop/learngit/.git/</p></blockquote><p>放进去两个文件</p><h3 id="添加到仓库"><a href="#添加到仓库" class="headerlink" title="添加到仓库"></a>添加到仓库</h3><p>添加某一个文件</p><figure class="highlight plain"><figcaption><span>add MyView.txt```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">添加全部文件</span><br><span class="line"></span><br><span class="line">```$git add .</span><br></pre></td></tr></table></figure><p>注意点add 后面的 ”  .  “ 和add之间有一个空格</p><h3 id="提交到仓库"><a href="#提交到仓库" class="headerlink" title="提交到仓库"></a>提交到仓库</h3><figure class="highlight plain"><figcaption><span>git commit -m "learn git"```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">或者  ```$ git commit -m```输入详细的注释</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 2、版本控制</span><br><span class="line"></span><br><span class="line">进行几次操作</span><br><span class="line"></span><br><span class="line">1、删除.swift文件 -&gt;提交</span><br><span class="line"></span><br><span class="line">2、添加一个新的txt -&gt; 提交</span><br><span class="line"></span><br><span class="line">3、修改第一个txt即MyView.txt 文件 —&gt;提交</span><br><span class="line"></span><br><span class="line">### 历史记录git log</span><br><span class="line"></span><br><span class="line">```$git log</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Date:   Sat Nov 9 16:49:23 2019 +0800</span><br><span class="line">    modify first txt</span><br><span class="line"></span><br><span class="line">commit 4aa751bb72b9373ce85783d9fc8b88cff3a6565c</span><br><span class="line">Author: xfq &lt;xfq@xfqdeMacBook-Pro.local&gt;</span><br><span class="line">Date:   Sat Nov 9 16:48:46 2019 +0800</span><br><span class="line">    add new txt</span><br><span class="line"></span><br><span class="line">commit 8f04464e6c46d3fbfbcd4e934599a567161f498e</span><br><span class="line">Author: xfq &lt;xfq@xfqdeMacBook-Pro.local&gt;</span><br><span class="line">Date:   Sat Nov 9 16:47:34 2019 +0800</span><br><span class="line">    delete .swift</span><br><span class="line"></span><br><span class="line">commit dc9828ad2125b111ea4f6e010c5213f3c029c6f8</span><br><span class="line">Author: xfq &lt;xfq@xfqdeMacBook-Pro.local&gt;</span><br><span class="line">Date:   Sat Nov 9 16:36:59 2019 +0800</span><br><span class="line">    learn git</span><br><span class="line">:</span><br></pre></td></tr></table></figure><p>或者使用 输出commit id 和 描述 信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure><p>fb118149f888a957e01539bc645b6c4d656f081a modify first txt<br>4aa751bb72b9373ce85783d9fc8b88cff3a6565c add new txt<br>8f04464e6c46d3fbfbcd4e934599a567161f498e delete .swift<br>dc9828ad2125b111ea4f6e010c5213f3c029c6f8 learn git</p><h3 id="返回版本-撤销commit"><a href="#返回版本-撤销commit" class="headerlink" title="返回版本-撤销commit"></a>返回版本-撤销commit</h3><blockquote><p>方法1 git reset –hard HEAD ^</p><p>git reset –hard HEAD ^  ( ^ 表示回到上一个版本，如果需要回退到上上个版本的话，将HEAD^改成HEAD^^, 以此类推。那如果要回退到前100个版本，这种方法肯定不方便，我们可以使用简便命令操作：git reset –hard HEAD~100 );</p></blockquote><blockquote><p>方法2 ：git reset –hard 版本号 </p></blockquote><ul><li>返回上一个版本</li></ul><figure class="highlight plain"><figcaption><span>reset --hard HEAD^```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git reset –hard HEAD^<br>HEAD is now at 4aa751b add new txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">此时文件MyView.txt已经找回了修改前的内容；</span><br><span class="line"></span><br><span class="line">- 重新回到modify first txt版本（最新版本）</span><br><span class="line"></span><br><span class="line">如果当前终端没有关闭</span><br><span class="line"></span><br><span class="line">可以往上翻找到modify first txt版本commit id 为 fb11814...；</span><br></pre></td></tr></table></figure><p>git reset –hard fb11814<br>HEAD is now at fb11814 modify first txt<br>xfqdeMacBook-Pro:learnGit xfq$ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 返回上上个（ delete .swift）版本</span><br></pre></td></tr></table></figure><p>git reset –hard 8f0446<br>HEAD is now at 8f04464 delete .swift</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">此时addnew.txt 还没有被创建；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 想回到 modify first txt</span><br><span class="line"></span><br><span class="line">这个时候终端关了，上面的记录没有了找不到commit id</span><br></pre></td></tr></table></figure><p>git reflog<br>8f04464 HEAD@{0}: reset: moving to 8f0446<br>fb11814 HEAD@{1}: reset: moving to fb118<br>4aa751b HEAD@{2}: reset: moving to HEAD^<br>fb11814 HEAD@{3}: reset: moving to fb118<br>4aa751b HEAD@{4}: reset: moving to 4aa751<br>4aa751b HEAD@{5}: reset: moving to HEAD^<br>上面的几次是来回移动的记录<br>fb11814 HEAD@{6}: commit: modify first txt<br>4aa751b HEAD@{7}: commit: add new txt<br>8f04464 HEAD@{8}: commit: delete .swift<br>dc9828a HEAD@{9}: commit (initial): learn git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git reset –hard fb11814<br>HEAD is now at fb11814 modify first txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 管理修改</span><br><span class="line"></span><br><span class="line">修改的文件在推送到远程之前 是在工作区，暂存区，master工作</span><br><span class="line"></span><br><span class="line">### 撤销修改</span><br><span class="line"></span><br><span class="line">1. 工作区修改了文件 没有提交到暂存区（没有执行add 操作）working tree内撤销</span><br><span class="line">2. 工作区修改了文件 提交到了暂存区（执行了 add操作）</span><br><span class="line">3. 工作区修改了文件提交到了master分支（执行了 add commit操作）</span><br><span class="line"></span><br><span class="line">1的解决办法</span><br><span class="line"></span><br><span class="line">a: 直接修改工作区的文件，就是把你的修改撤回😄</span><br><span class="line"></span><br><span class="line">b：git status 看一下状态</span><br></pre></td></tr></table></figure><p>git status<br>On branch master<br>Changes not staged for commit:<br>  (use “git add <file>…” to update what will be committed)<br>  (use “git checkout – <file>…” to discard changes in working directory)</p><pre><code>modified:   AddNew.txt</code></pre><p>no changes added to commit (use “git add” and/or “git commit -a”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git checkout -- &lt;file&gt; 丢弃工作区某一文件的修改</span><br><span class="line">- git checkout  .  丢弃所有的修改(不包含新建的没有被add的文件，因为Untracked) </span><br><span class="line"></span><br><span class="line">``git checkout -- AddNew.txt``</span><br><span class="line"></span><br><span class="line">2的解决办法</span><br><span class="line"></span><br><span class="line">执行git status</span><br></pre></td></tr></table></figure><p>git status<br>On branch master<br>Changes to be committed:<br>  (use “git reset HEAD <file>…” to unstage)</p><pre><code>modified:   AddNew.txtnew file:   ForBackAddFile.txtmodified:   MyView.txt</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`git reset HEAD `</span><br><span class="line"></span><br><span class="line">用命令`git reset HEAD `可以把所有暂存区的修改撤销掉（unstage），重新放回工作区包括新建的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">把部分文件的add 撤销</span><br></pre></td></tr></table></figure><p>git reset HEAD <file>…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后再 在执行git checkout -- file  或者git checkout .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 3、远程库</span><br><span class="line"></span><br><span class="line">在远程建立了远程仓库 把本地的learngit 提交到远程仓库</span><br><span class="line"></span><br><span class="line">方法一：在远程（github等）上建立仓库，把仓库clone 下来，把learngit代码拉进去，直接提交 </span><br><span class="line"></span><br><span class="line">常用，不在这次学习范畴。直接粘贴几个命令</span><br><span class="line"></span><br><span class="line">方法二：在远程（github等）上建立仓库 把learngit和远程直接建立联系</span><br><span class="line"></span><br><span class="line">- 和远程仓库建立联系</span><br><span class="line"></span><br><span class="line">  ```git remote add origin https://git.coding.net/Xiaowuqing/1111.git</span><br></pre></td></tr></table></figure><ul><li>推送到远程<ol><li>远程仓库有README.md文件</li></ol></li></ul><figure class="highlight plain"><figcaption><span>push origin master```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; To https://git.coding.net/xxxx/learnGit.git</span><br><span class="line">&gt;</span><br><span class="line">&gt; ! [rejected]    master -&gt; master (non-fast-forward)</span><br><span class="line">&gt;</span><br><span class="line">&gt; error: failed to push some refs to &apos;https://git.coding.net/xxxx/learnGit.git&apos;</span><br><span class="line">&gt;</span><br><span class="line">&gt; hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">&gt;</span><br><span class="line">&gt; hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">&gt;</span><br><span class="line">&gt; hint: &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">&gt;</span><br><span class="line">&gt; hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br><span class="line"></span><br><span class="line">&gt; 错误原因其实是我本地没有README.md这个文件，而远程仓库中有， </span><br><span class="line">&gt; 如何解决那？ </span><br><span class="line">&gt; 很简单 </span><br><span class="line">&gt; git pull --rebase origin master </span><br><span class="line">&gt; 执行这一句就行了 </span><br><span class="line">&gt; 执行完后会发现本地已经有了 README.md 这个文件</span><br><span class="line">&gt;</span><br><span class="line">&gt; 然后就是常规操作了 </span><br><span class="line">&gt; git push -u origin master </span><br><span class="line"></span><br><span class="line">其实后面的这个常规操作我是执行的git push  origin master  也成功了 **所有没有理解git push -u origin master **</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; [由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令](https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440)。</span><br><span class="line"></span><br><span class="line">2. 无README.md文件</span><br><span class="line"></span><br><span class="line">```diff</span><br><span class="line">    xfqdeMacBook-Pro:~ xfq$ cd /Users/xfq/Desktop/33</span><br><span class="line">    </span><br><span class="line">    初始化</span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$ git init</span><br><span class="line">    Initialized empty Git repository in /Users/xfq/Desktop/33/.git/</span><br><span class="line">    </span><br><span class="line">    创建txt</span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$ vim 1.txt</span><br><span class="line">    </span><br><span class="line">    和远程建立关联</span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$ git remote add origin https://git.coding.net/Xiaowuqing/22.git</span><br><span class="line">    </span><br><span class="line">    直接推动报错，因为本地文件没有提交</span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$ git push origin master</span><br><span class="line">error: src refspec master does not match any.</span><br><span class="line">error: failed to push some refs to &apos;https://git.coding.net/Xiaowuqing/22.git&apos;</span><br><span class="line">    </span><br><span class="line">    查看本地状态</span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$ git status</span><br><span class="line">    On branch master</span><br><span class="line">    Initial commit</span><br><span class="line">    Untracked files:</span><br><span class="line">    (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">    1.txt</span><br><span class="line">    nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line">    </span><br><span class="line">    添加到暂存区</span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$ git add .</span><br><span class="line">    </span><br><span class="line">    提交到master </span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$ git commit -m &quot;init&quot;</span><br><span class="line">    [master (root-commit) 04a2677] init</span><br><span class="line">    1 file changed, 1 insertion(+)</span><br><span class="line">    create mode 100644 1.txt</span><br><span class="line">    </span><br><span class="line">    推动到远程</span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$ git push origin master</span><br><span class="line">    Counting objects: 3, done.</span><br><span class="line">    Writing objects: 100% (3/3), 211 bytes | 0 bytes/s, done.</span><br><span class="line">    Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">    To https://git.coding.net/Xiaowuqing/22.git</span><br><span class="line">    * [new branch]      master -&gt; master</span><br><span class="line">    xfqdeMacBook-Pro:33 xfq$</span><br></pre></td></tr></table></figure><h2 id="4、分支管理"><a href="#4、分支管理" class="headerlink" title="4、分支管理"></a>4、分支管理</h2><figure class="highlight plain"><figcaption><span>xfq$ cd</span><a href="/Users/xfq/Desktop/33">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">xfqdeMacBook-Pro:~ xfq$ cd /Users/xfq/Desktop/33</span><br><span class="line"></span><br><span class="line">查看分支 *指向的就是当前分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git branch</span><br><span class="line">* master</span><br><span class="line"></span><br><span class="line">创建并指向dev分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git checkout -b dev</span><br><span class="line">Switched to a new branch &apos;dev&apos;</span><br><span class="line"></span><br><span class="line">查看分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">  </span><br><span class="line">创建分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git branch bug</span><br><span class="line"></span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git branch</span><br><span class="line">  bug</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">  </span><br><span class="line">  修改当前分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git checkout bug</span><br><span class="line">Switched to branch &apos;bug&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git branch</span><br><span class="line">* bug</span><br><span class="line">  dev</span><br><span class="line">  master</span><br><span class="line"> </span><br><span class="line"> 在bug分支提交</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git add .</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git commit -m &quot;modify txt and commit in bug branch&quot;</span><br><span class="line">[bug bc3594f] modify txt and commit in bug branch</span><br><span class="line"> 2 files changed, 3 insertions(+)</span><br><span class="line"> </span><br><span class="line"> 切换分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line"></span><br><span class="line">把bug分支合并到当前分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git merge bug</span><br><span class="line">Merge made by the &apos;recursive&apos; strategy.</span><br><span class="line"> 1.txt | 2 ++</span><br><span class="line"> 2.txt | 1 +</span><br><span class="line"> 2 files changed, 3 insertions(+)</span><br><span class="line"> </span><br><span class="line"> 删除bug分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git branch -d bug</span><br><span class="line">Deleted branch bug (was bc3594f).</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;1、版本库&quot;&gt;&lt;a href=&quot;#1、版本库&quot; class=&quot;headerlink&quot; title=&quot;1、版本库&quot;&gt;&lt;/a&gt;1、版本库&lt;/h2&gt;&lt;h3 id=&quot;创建版本库（文件夹）&quot;&gt;&lt;a href=&quot;#创建版本库（文件夹）&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://my.com/2019/11/09/git%E5%B8%B8%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://my.com/2019/11/09/git常用场景/</id>
    <published>2019-11-09T08:13:28.000Z</published>
    <updated>2019-11-13T15:50:08.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景1、修改本地所连接的远程仓库"><a href="#场景1、修改本地所连接的远程仓库" class="headerlink" title="场景1、修改本地所连接的远程仓库"></a>场景1、修改本地所连接的远程仓库</h3><p><a href="https://blog.csdn.net/zhezhebie/article/details/78761417" target="_blank" rel="noopener"># git添加/删除远程仓库https://blog.csdn.net/zhezhebie/article/details/78761417</a></p><p>说明：当前本地22文件连接的是1111远程项目 想把它改成连接到22远程项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">查看当前远程仓库路径</span><br><span class="line"></span><br><span class="line">xfqdeMacBook-Pro:22 xfq$ git remote -v</span><br><span class="line">originhttps://git.coding.net/Xiaowuqing/1111.git (fetch)</span><br><span class="line">originhttps://git.coding.net/Xiaowuqing/1111.git (push)</span><br><span class="line"></span><br><span class="line">删除与远程仓库的关联</span><br><span class="line">xfqdeMacBook-Pro:22 xfq$ git remote rm origin</span><br><span class="line"></span><br><span class="line">查看当前远程仓库路径 什么也没有</span><br><span class="line">xfqdeMacBook-Pro:22 xfq$ git remote -v</span><br><span class="line"></span><br><span class="line">添加新的远程库的关联</span><br><span class="line">xfqdeMacBook-Pro:22 xfq$ git remote add origin https://git.coding.net/Xiaowuqing/22.git</span><br><span class="line"></span><br><span class="line">查看当前远程仓库路径</span><br><span class="line">xfqdeMacBook-Pro:22 xfq$ git remote -v</span><br><span class="line">originhttps://git.coding.net/Xiaowuqing/22.git (fetch)</span><br><span class="line">originhttps://git.coding.net/Xiaowuqing/22.git (push)</span><br></pre></td></tr></table></figure><h3 id="场景2、提交到远程dev分支"><a href="#场景2、提交到远程dev分支" class="headerlink" title="场景2、提交到远程dev分支"></a>场景2、提交到远程dev分支</h3><p>把代码提交到远程dev分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">xfqdeMacBook-Pro:33 xfq$ git add .</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git commit -m &quot; modify to dev branch&quot;</span><br><span class="line">[dev 04d5b30]  modify to dev branch</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> </span><br><span class="line"> 当前分支在dev 上可是远程并没有建立dev 分支</span><br><span class="line">xfqdeMacBook-Pro:33 xfq$ git push</span><br><span class="line">fatal: The current branch dev has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin dev</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">使用完整的命令 创建并提交到dev 分支   </span><br><span class="line">xfqdeMacBook-Pro:33 xfq$  git push origin dev</span><br><span class="line">Counting objects: 4, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (4/4), 367 bytes | 0 bytes/s, done.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://git.coding.net/Xiaowuqing/22.git</span><br><span class="line"> * [new branch]      dev -&gt; dev</span><br></pre></td></tr></table></figure><h3 id="场景3、clone远程dev分支"><a href="#场景3、clone远程dev分支" class="headerlink" title="场景3、clone远程dev分支"></a>场景3、clone远程dev分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.coding.net/Xiaowuqing/22.git -b dev</span><br><span class="line"></span><br><span class="line">Cloning into &apos;22&apos;...</span><br><span class="line"></span><br><span class="line">remote: Enumerating objects: 28, done.</span><br><span class="line"></span><br><span class="line">remote: Counting objects: 100% (28/28), done.</span><br><span class="line"></span><br><span class="line">remote: Compressing objects: 100% (15/15), done.</span><br><span class="line"></span><br><span class="line">remote: Total 28 (delta 4), reused 0 (delta 0)</span><br><span class="line"></span><br><span class="line">Unpacking objects: 100% (28/28), done.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone -b dev https://git.coding.net/Xiaowuqing/22.git</span><br><span class="line">Cloning into &apos;22&apos;...</span><br><span class="line">remote: Enumerating objects: 28, done.</span><br><span class="line">remote: Counting objects: 100% (28/28), done.</span><br><span class="line">remote: Compressing objects: 100% (15/15), done.</span><br><span class="line">remote: Total 28 (delta 4), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (28/28), done.</span><br></pre></td></tr></table></figure><p>这个时候是没有master分支的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xfqdeMacBook-Pro:22 xfq$ git branch</span><br><span class="line">* dev</span><br><span class="line">xfqdeMacBook-Pro:22 xfq$ git branch master</span><br><span class="line">xfqdeMacBook-Pro:22 xfq$ git branck</span><br><span class="line">git: &apos;branck&apos; is not a git command. See &apos;git --help&apos;.</span><br><span class="line"></span><br><span class="line">Did you mean this?</span><br><span class="line">branch</span><br><span class="line">xfqdeMacBook-Pro:22 xfq$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><h3 id="场景4、Git撤销-amp-回滚操作"><a href="#场景4、Git撤销-amp-回滚操作" class="headerlink" title="场景4、Git撤销&amp;回滚操作"></a>场景4、Git撤销&amp;回滚操作</h3><p><a href="https://blog.csdn.net/ligang2585116/article/details/71094887" target="_blank" rel="noopener">Git撤销&amp;回滚操作</a></p><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><ul><li>在未进行<code>git push</code>前的所有操作，都是在“本地仓库”中执行的。我们暂且将“本地仓库”的代码还原操作叫做“撤销”！</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout fileName</span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure><ul><li>同时对多个文件执行了<code>git add</code>操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">取消部分暂存</span><br><span class="line">$ git reset HEAD 1.txt</span><br><span class="line">取消全部暂存</span><br><span class="line">git reset HEAD</span><br><span class="line">撤销部分修改</span><br><span class="line">git checkout 1.txt</span><br><span class="line">撤销全部修改</span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure><ul><li>执行了commit 操作</li></ul><p>写完代码后，我们一般这样</p><p>git add . //添加所有文件</p><p>git commit -m “本功能全部完成”</p><p>执行完commit后，想撤回commit，怎么办？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line">这样就成功的撤销了你的commit</span><br><span class="line"></span><br><span class="line">注意，仅仅是撤回commit操作，您写的代码仍然保留。</span><br><span class="line"></span><br><span class="line">说一下个人理解：</span><br><span class="line"></span><br><span class="line">HEAD^的意思是上一个版本，也可以写成HEAD~1</span><br><span class="line"></span><br><span class="line">如果你进行了2次commit，想都撤回，可以使用HEAD~2</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">至于这几个参数：</span><br><span class="line"></span><br><span class="line">--mixed </span><br><span class="line"></span><br><span class="line">意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作</span><br><span class="line">这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</span><br><span class="line"> </span><br><span class="line">--soft  </span><br><span class="line"></span><br><span class="line">不删除工作空间改动代码，撤销commit，不撤销git add . </span><br><span class="line"> </span><br><span class="line">--hard</span><br><span class="line"></span><br><span class="line">删除工作空间改动代码，撤销commit，撤销git add . </span><br><span class="line"></span><br><span class="line">注意完成这个操作后，就恢复到了上一次的commit状态。</span><br><span class="line"></span><br><span class="line">顺便说一下，如果commit注释写错了，只是想改一下注释，只需要：</span><br><span class="line"></span><br><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line">此时会进入默认vim编辑器，修改注释完毕后保存就好了。</span><br><span class="line">或者git commit --amend -m&quot;说明&quot;</span><br></pre></td></tr></table></figure><p><a href="http://blog.csdn.net/ligang2585116/article/details/51816372#t7" target="_blank" rel="noopener">Git Pro深入浅出（二）中的重置揭秘部分</a></p><h4 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h4><p>已进行<code>git push</code>，即已推送到“远程仓库”中。我们将已被提交到“远程仓库”的代码还原操作叫做“回滚”！<strong>注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员！</strong></p><p>准备工作如下</p><img src="/Users/xfq/Library/Containers/com.tencent.qq/Data/Library/Application Support/QQ/Users/1135618686/QQ/Temp.db/E77DED8A-627F-4DF6-8ABE-2CDEB7B14F4A.png" alt="E77DED8A-627F-4DF6-8ABE-2CDEB7B14F4A" style="zoom:30%;" /><p>我修改2的代码写的有问题 </p><p>撤销合并 git reflog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;场景1、修改本地所连接的远程仓库&quot;&gt;&lt;a href=&quot;#场景1、修改本地所连接的远程仓库&quot; class=&quot;headerlink&quot; title=&quot;场景1、修改本地所连接的远程仓库&quot;&gt;&lt;/a&gt;场景1、修改本地所连接的远程仓库&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flutter 基本语法</title>
    <link href="http://my.com/2019/11/06/Flutter%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://my.com/2019/11/06/Flutter 基本语法/</id>
    <published>2019-11-05T16:05:00.890Z</published>
    <updated>2019-11-05T16:14:14.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Final-and-const"><a href="#Final-and-const" class="headerlink" title="Final and const"></a>Final and const</h3><p>如果你以后不打算修改一个变量，使用 <code>final</code> 或者 <code>const</code>。 一个 final 变量只能赋值一次；一个 const 变量是编译时常量。 （Const 变量同时也是 final 变量。） 顶级的 final 变量或者类中的 final 变量在 第一次使用的时候初始化。</p><p><strong><em>注意： 实例变量可以为 <code>final</code> 但是不能是 <code>const</code> 。</em></strong></p><p><code>const</code> 变量为编译时常量。 如果 const 变量在类中，请定义为 <code>static const</code>。 可以直接定义 const 和其值，也 可以定义一个 const 变量使用其他 const 变量的值来初始化其值。</p><p><code>const</code> 关键字不仅仅只用来定义常量。 有可以用来创建不变的值， 还能定义构造函数为 const 类型的，这种类型 的构造函数创建的对象是不可改变的。任何变量都可以有一个不变的值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: [] creates an empty list.</span></span><br><span class="line"><span class="comment">// const [] creates an empty, immutable list (EIA).</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">const</span> [];   <span class="comment">// foo is currently an EIA.</span></span><br><span class="line"><span class="keyword">final</span> bar = <span class="keyword">const</span> []; <span class="comment">// bar will always be an EIA.</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="keyword">const</span> []; <span class="comment">// baz is a compile-time constant EIA.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You can change the value of a non-final, non-const variable,</span></span><br><span class="line"><span class="comment">// even if it used to have a const value.</span></span><br><span class="line">foo = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can't change the value of a final or const variable.</span></span><br><span class="line"><span class="comment">// bar = []; // Unhandled exception.</span></span><br><span class="line"><span class="comment">// baz = []; // Unhandled exception.</span></span><br></pre></td></tr></table></figure><h3 id="Built-in-types-内置的类型"><a href="#Built-in-types-内置的类型" class="headerlink" title="Built-in types(内置的类型)"></a>Built-in types(内置的类型)</h3><p>Dart 内置支持下面这些类型：</p><ul><li>numbers</li><li>strings</li><li>booleans</li><li>lists (也被称之为 <em>arrays</em>)</li><li>maps</li><li>runes (用于在字符串中表示 Unicode 字符)</li><li>symbols</li></ul><h3 id="Numbers（数值）"><a href="#Numbers（数值）" class="headerlink" title="Numbers（数值）"></a>Numbers（数值）</h3><p>Dart 支持两种类型的数字：</p><ul><li><p><a href="https://api.dartlang.org/stable/dart-core/int-class.html" target="_blank" rel="noopener"><code>int</code></a></p><p>整数值，其取值通常位于 -253 和 253 之间。</p></li><li><p><a href="https://api.dartlang.org/stable/dart-core/double-class.html" target="_blank" rel="noopener"><code>double</code></a></p><p>64-bit (双精度) 浮点数，符合 IEEE 754 标准。</p></li></ul><p><code>int</code> 和 <code>double</code> 都是 <a href="https://api.dartlang.org/stable/dart-core/num-class.html" target="_blank" rel="noopener"><code>num</code></a> 的子类</p><h3 id="字符串和数字之间转换的方式："><a href="#字符串和数字之间转换的方式：" class="headerlink" title="字符串和数字之间转换的方式："></a>字符串和数字之间转换的方式：</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(one == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">'1.1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(onePointOne == <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(oneAsString == <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(piAsString == <span class="string">'3.14'</span>);</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="=="></a><code>==</code></h3><p>操作符判断两个对象的内容是否一样。 如果两个字符串包含一样的字符编码序列， 则他们是相等的</p><h3 id="三个单引号或者双引号也可以-创建多行字符串对象"><a href="#三个单引号或者双引号也可以-创建多行字符串对象" class="headerlink" title="三个单引号或者双引号也可以 创建多行字符串对象"></a>三个单引号或者双引号也可以 创建多行字符串对象</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'''</span></span><br><span class="line"><span class="string">You can create</span></span><br><span class="line"><span class="string">multi-line strings like this one.</span></span><br><span class="line"><span class="string">'''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"""This is also a</span></span><br><span class="line"><span class="string">multi-line string."""</span>;</span><br></pre></td></tr></table></figure><h3 id="有疑问？那r到底是什么通过提供一个-r-前缀可以创建一个-“原始-raw”-字符串："><a href="#有疑问？那r到底是什么通过提供一个-r-前缀可以创建一个-“原始-raw”-字符串：" class="headerlink" title="有疑问？那r到底是什么通过提供一个 r 前缀可以创建一个 “原始 raw” 字符串："></a>有疑问？那r到底是什么通过提供一个 <code>r</code> 前缀可以创建一个 “原始 raw” 字符串：</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">r"In a raw string, even \n isn't special."</span>;</span><br></pre></td></tr></table></figure><p>字符串字面量是编译时常量， 带有字符串插值的字符串定义，若干插值表达式引用的为编译时常量则其结果也是编译时常量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Final-and-const&quot;&gt;&lt;a href=&quot;#Final-and-const&quot; class=&quot;headerlink&quot; title=&quot;Final and const&quot;&gt;&lt;/a&gt;Final and const&lt;/h3&gt;&lt;p&gt;如果你以后不打算修改一个变量，使用 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>关键字</title>
    <link href="http://my.com/2019/11/05/%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://my.com/2019/11/05/关键字/</id>
    <published>2019-11-05T15:27:50.245Z</published>
    <updated>2019-11-05T16:04:08.193Z</updated>
    
    <content type="html"><![CDATA[<h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p> 最终，完结器，java中可以使用final 关键字声明类、属性、方法；</p><p>声明时注意</p><ul><li>使用final声明的类不能有子类</li><li>final 申明的方法不能被子类覆写</li><li>使用final申明的变量即为常量，常量不可以被修改</li></ul><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><ul><li>使用static声明的属性，则此属性被称为全局属性（静态属性）</li><li>类方法  非static申明的方法可以调用static声明的属性或方法，但是，static声明的方法不能调用非static声明的属性或方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;final&quot;&gt;&lt;a href=&quot;#final&quot; class=&quot;headerlink&quot; title=&quot;final&quot;&gt;&lt;/a&gt;final&lt;/h4&gt;&lt;p&gt; 最终，完结器，java中可以使用final 关键字声明类、属性、方法；&lt;/p&gt;
&lt;p&gt;声明时注意&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flutter语法</title>
    <link href="http://my.com/2019/11/04/Flutter%E8%AF%AD%E6%B3%95/"/>
    <id>http://my.com/2019/11/04/Flutter语法/</id>
    <published>2019-11-04T14:59:41.483Z</published>
    <updated>2019-11-05T15:24:09.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="final和const"><a href="#final和const" class="headerlink" title="final和const"></a>final和const</h2><p>final和const 关键字用于声明不可变的(其实final是变量只能赋值一次)。不能修改使用final 或const 关键字声明的变量的值。</p><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a><strong><em>共同点</em></strong></h4><ol><li><strong>声明时类型可以省略，一旦赋值不能再重新复制</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">final String a = &apos;abc&apos;;</span><br><span class="line">final a = &apos;abc&apos;;</span><br><span class="line"></span><br><span class="line">const String a = &apos;abc&apos;;</span><br><span class="line">const a = &apos;abc&apos;;</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>不能和var同时使用</strong></p><p>![image-20191104231659210](/Users/xfq/Library/Application Support/typora-user-images/image-20191104231659210.png)</p></li></ol><p><strong><em>区别</em></strong></p><h4 id="区别一"><a href="#区别一" class="headerlink" title="区别一"></a>区别一</h4><p>final 是单赋值，只能赋值一次，一旦赋值就不能再次修改</p><p>const 是声明时赋值，一经声明就不能再修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final name; // 无类型注释</span><br><span class="line">final String nickname = &apos;Bobby&apos;; // 类型注释 String</span><br><span class="line">name = &apos;Bob&apos;; // 赋值第一次</span><br><span class="line">name = &apos;Alice&apos;; //错误：final变量 只能设置一次</span><br></pre></td></tr></table></figure><p><strong>const 是编译时常量，其值在编译时确定,必须在声明处赋值</strong></p><img src="/Users/xfq/Library/Application Support/typora-user-images/image-20191104233904218.png" alt="image-20191104233904218" style="zoom:50%;" /><p><strong>final变量与类变量在首次访问时才执行初始化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">final name = getName();</span><br><span class="line"></span><br><span class="line">String getName() &#123;</span><br><span class="line">  print(&apos;getName&apos;);</span><br><span class="line">  return &apos;bob&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const String nickname = &apos;Bobby&apos;;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    print(nickname);</span><br><span class="line">    print(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bobby</span><br><span class="line">getName</span><br><span class="line">bob</span><br></pre></td></tr></table></figure><p>final 变量在没有访问时，是不会自动进行赋值的。所以并没有 打印出 getName。等到访问name变量时才调用 getName() 函数进行赋值。</p><h4 id="区别二"><a href="#区别二" class="headerlink" title="区别二"></a>区别二</h4><p>当<code>const</code>用在<code>=</code>左边时，其作用是 *<em>声明变量常量，它要求 *</em>必须在声明变量时赋值，一旦赋值就不允许修改，而声明值一定要是编译时常数。</p><h5 id="编译常量"><a href="#编译常量" class="headerlink" title="编译常量"></a>编译常量</h5><ul><li>表达式。表达式的所有值都是编译时可知的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  const a = 1;</span><br><span class="line">  const b = a &gt; 1 ? 2 : 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>const</code>用在等号右边</p><p>当<code>const</code>用在<code>=</code>右边，其作用是 <strong>修饰值</strong>，它意味着对象的整个深度状态可以在编译时完全确定，并且对象将被冻结并且完全不可变。</p><p>一般用于修饰集合，它要求两点：</p><ul><li>集合的元素必须是递归的编译时常数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oid main() &#123;</span><br><span class="line">  var c = 2;</span><br><span class="line">  //ERROR, 集合元素必须是编译时常数。</span><br><span class="line">  var a = const [c,2,3];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不允许对集合做任何改变。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">  const a = const [1,2,3];</span><br><span class="line">  //ERROR, 不允许修改。</span><br><span class="line">  a[1] = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>const</code>修饰类的构造函数</li></ul><p>当<code>const</code>修饰类的构造函数时，它要求该类的所有成员都必须是<code>final</code>的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class ConstObject &#123;</span><br><span class="line">  </span><br><span class="line">  final value;</span><br><span class="line">  //ERROR, 必须是 final 变量。</span><br><span class="line">  int value2;</span><br><span class="line">  </span><br><span class="line">  const ConstObject(this.value);</span><br><span class="line">  </span><br><span class="line">  log() &#123;</span><br><span class="line">    print(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建和设置const 常量：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">String</span> nickname = <span class="string">'Bobby'</span>;</span><br><span class="line">nickname = <span class="string">'Alice'</span>; <span class="comment">// 错误：const变量不能再次赋值；</span></span><br></pre></td></tr></table></figure><p>const 关键字不只是用于声明常量，还可以用它来创建常量值；以及声明创建常量值的构造函数。任何变量都可以具有常量值。</p><p>例如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">const</span> [];</span><br><span class="line">foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 第一次赋值；</span></span><br><span class="line">foo = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]; <span class="comment">// 错误： const变量不能再次赋值；</span></span><br></pre></td></tr></table></figure><p>如果是 final 变量就不能再次赋值：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> bar = <span class="keyword">const</span> [];</span><br><span class="line">bar = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 错误：final变量 只能设置一次</span></span><br></pre></td></tr></table></figure><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p><code>final</code>的要求就是 <strong>其声明的变量在赋值之后就不再改变</strong>，它并不要求<code>=</code>的右边是编译时常数。</p><p><code>final</code>有两种场景：</p><ul><li>文件中的变量声明：必须在声明时赋值。</li><li>类的成员变量声明：可以在声明时赋值，也可以通过构造函数赋值语法糖<code>ClassV({this.a})</code>，或者初始化列表的方式赋值。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="2-1-const"><a href="#2-1-const" class="headerlink" title="2.1 const"></a>2.1 const</h2><ul><li>声明类成员变量时，<code>const</code>变量必须同时被声明为<code>static</code>的。</li><li><code>const</code>变量，变量命名方式应使用全大写加下划线。</li><li><code>const</code>变量只能在定义的时候初始化。</li></ul><h2 id="2-2-final"><a href="#2-2-final" class="headerlink" title="2.2 final"></a>2.2 final</h2><ul><li><code>final</code>变量可以在构造函数参数列表或者初始化列表中初始化。</li></ul><h2 id="2-3-static"><a href="#2-3-static" class="headerlink" title="2.3 static"></a>2.3 static</h2><ul><li>在文件中，变量不能声明为<code>static</code>。</li></ul><h2 id="2-4实例变量可以是final-不可能是const"><a href="#2-4实例变量可以是final-不可能是const" class="headerlink" title="2.4实例变量可以是final 不可能是const"></a>2.4实例变量可以是final 不可能是const</h2><p>最终实例变量必须在构造函数主体开始之前初始化， 那么为什么呢？ const必须在声明的时候就初始化，那实例对象初始化也没有什么意义，final至少可以赋值一次</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;final和const&quot;&gt;&lt;a href=&quot;#final和const&quot; class=&quot;headerlink&quot; title=&quot;final和const&quot;&gt;&lt;/a&gt;final和const&lt;/h2&gt;&lt;p&gt;final和const 关键字用于声明不可变的(其实final是变量
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>android studio 常用快捷键</title>
    <link href="http://my.com/2019/11/03/android%20studio%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://my.com/2019/11/03/android studio 常用快捷键/</id>
    <published>2019-11-03T09:19:12.007Z</published>
    <updated>2019-11-03T09:19:12.008Z</updated>
    
    <content type="html"><![CDATA[<p> Android Studio常用操作</p><h2 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h2><ol><li><p>全文文本替换 command + shift +r</p></li><li><p>文件内文本替换 command + r</p></li><li><p>一次性修改同一文件中所有搜索到的文字 command+control+g</p></li></ol><h2 id="文本查找"><a href="#文本查找" class="headerlink" title="文本查找"></a>文本查找</h2><ol><li>全文文本查找 command + shift +f</li><li>文件内文本查找 command + f</li><li>查找下一个 command + g</li><li>查找上一个 command + shift + g</li></ol><h2 id="代码格式整理"><a href="#代码格式整理" class="headerlink" title="代码格式整理"></a>代码格式整理</h2><ol><li>代码对其整理 command + option +L</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; Android Studio常用操作&lt;/p&gt;
&lt;h2 id=&quot;文本替换&quot;&gt;&lt;a href=&quot;#文本替换&quot; class=&quot;headerlink&quot; title=&quot;文本替换&quot;&gt;&lt;/a&gt;文本替换&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;全文文本替换 command + shift +r&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Typora 简单使用</title>
    <link href="http://my.com/2019/11/03/Typora%20%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://my.com/2019/11/03/Typora 简单使用/</id>
    <published>2019-11-03T02:48:29.534Z</published>
    <updated>2019-11-03T04:06:42.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora的简单使用-mac"><a href="#Typora的简单使用-mac" class="headerlink" title="Typora的简单使用 mac"></a>Typora的简单使用 mac</h1><p>[TOC]</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>command+ 数字（1、2….6）</p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>command+u</p><p><u>下划线</u></p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>删除线</del></p><blockquote><p><del>123456</del></p></blockquote><p><del>qqq</del></p><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><p><strong>command+b</strong></p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p><em>这里是斜体</em></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://www.jianshu.com/p/092de536d948" target="_blank" rel="noopener">command + k</a></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>引用直接使用  &gt;</p><blockquote><p>这里又是一个 &gt;</p></blockquote></blockquote><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>  command + option + t</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote><p><code>code</code>  前面三个 ```   后面三个</p></blockquote><p>其他内容查看 <a href="https://www.jianshu.com/p/092de536d948" target="_blank" rel="noopener">https://www.jianshu.com/p/092de536d948</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Typora的简单使用-mac&quot;&gt;&lt;a href=&quot;#Typora的简单使用-mac&quot; class=&quot;headerlink&quot; title=&quot;Typora的简单使用 mac&quot;&gt;&lt;/a&gt;Typora的简单使用 mac&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>抓包原理</title>
    <link href="http://my.com/2019/11/03/%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86/"/>
    <id>http://my.com/2019/11/03/抓包原理/</id>
    <published>2019-11-03T02:45:27.000Z</published>
    <updated>2019-11-03T04:12:16.553Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>context的理解</title>
    <link href="http://my.com/2019/11/01/context%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://my.com/2019/11/01/context的理解/</id>
    <published>2019-11-01T15:12:18.000Z</published>
    <updated>2019-11-03T04:07:16.360Z</updated>
    
    <content type="html"><![CDATA[<p>理解成创建widget的上下文就可以了。context实际是element，是为了阻止直接对element操作而抽象出来的一个概念</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;理解成创建widget的上下文就可以了。context实际是element，是为了阻止直接对element操作而抽象出来的一个概念&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>设计模式之工厂模式</title>
    <link href="http://my.com/2019/10/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://my.com/2019/10/29/设计模式之工厂模式/</id>
    <published>2019-10-29T15:32:46.000Z</published>
    <updated>2019-10-29T16:14:18.878Z</updated>
    
    <content type="html"><![CDATA[<p>###工厂模式（Factory Pattern）</p><p>工厂模式（Factory Pattern）创建型模式，提供一种应用于创建对象的方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###工厂模式（Factory Pattern）&lt;/p&gt;
&lt;p&gt;工厂模式（Factory Pattern）创建型模式，提供一种应用于创建对象的方法&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://my.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://my.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>静态变量和全局变化</title>
    <link href="http://my.com/2019/10/26/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E5%8C%96/"/>
    <id>http://my.com/2019/10/26/静态变量和全局变化/</id>
    <published>2019-10-26T11:01:37.000Z</published>
    <updated>2019-10-26T11:07:10.308Z</updated>
    
    <content type="html"><![CDATA[<p>#位置一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">位置1：</span><br><span class="line">NSInteger cellHeight = 100;</span><br><span class="line">@interface MMMMPeople : NSObject</span><br><span class="line">位置2：</span><br><span class="line">NSInteger cellHeight = 100;</span><br><span class="line">@end</span><br><span class="line">位置3：</span><br><span class="line">NSInteger cellHeight = 100;</span><br></pre></td></tr></table></figure><h1 id="位置二"><a href="#位置二" class="headerlink" title="位置二"></a>位置二</h1><figure class="highlight plain"><figcaption><span>报错：Cannot declare variable inside @interface or @protocol```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">.m中同样 （略）</span><br></pre></td></tr></table></figure><p>位置1：<br>NSInteger cellHeight = 100;<br>@interface ViewController ()<br>位置2：<br>NSInteger cellHeight = 100;<br>@end<br>位置3：<br>NSInteger cellHeight = 100;</p><p>@implementation ViewController<br>位置4：<br>NSInteger cellHeight = 100;</p><ul><li>(void)functionA {</li></ul><p>}<br>位置5：<br>NSInteger cellHeight = 100;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```位置2 报错：Cannot declare variable inside @interface or @protocol</span><br></pre></td></tr></table></figure><p> ######同一个工程中，两个不同 .m 文件中同样的全局变量不能同时存在，因为这样在编译或运行的时候，编译器分不清是哪个全局变量，所以我们千万不能同时在同一个工程中定义同样的全局变量！</p><hr><ul><li>如果我就是想用另一个 .m 文件中的全局变量，那怎么处理呢？很简单，使用关键字 extern 修饰使用的全局变量就好了，</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extern NSInteger CellHeight;</span><br><span class="line">打印结果：0。因为当没有初始化的时候系统默认：零。 </span><br><span class="line">注：如果在MMMMPeople中初始化了数据，比如NSInteger CellHeight = 100；</span><br><span class="line">则打印结果就为100，但是在ViewController中就不能再次初始化！！！否则编译报错同上！！！</span><br><span class="line">#&apos;extern&apos; variable has an initializer</span><br><span class="line"></span><br><span class="line">#但是可以全局修改</span><br><span class="line"> cellHeight = 300;</span><br><span class="line">    NSLog(@&quot;cellHeight ===== %ld&quot;,(long)cellHeight);   -----&gt;300</span><br></pre></td></tr></table></figure><hr><p>静态全局变量同样不能在 2的位置声明 否则<br><code>位置2 报错：Cannot declare variable inside @interface or @protocol</code></p><p>extern想使用它，但还是不行的，静态全局变量只能在本文件中使用</p><p>#全局变量与全局静态变量的区别：</p><p>(a）若程序由一个源文件构成时，全局变量与全局静态变量没有区别。<br>(b)若程序由多个源文件构成时，全局变量与全局静态变量不同：全局静态变量使得该变量成为定义该变量的源文件所独享，即：全局静态变量对组成该程序的其它源文件是无效的 ,全局变量可以通过：extern。<br>(c)具有外部链接（#import 会把变量和方法全部导入过去如果A中#import “B” B 中有static aa 那A中已经有了static aa 如果A修改aa其实修改的就是B中的aa）的静态；可以在所有源文件里调用并修改!  全局变量除了本文件，其他文件可以通过extern的方式引用；<br>比如：<br>在.h中声明了 且导入了头文件<br><img src="https://upload-images.jianshu.io/upload_images/4415838-6b9ad31417495981.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="A4695CCF-809F-4BBC-83AE-3755A10B3667.png"></p><p>在.m中声明了 且导入了头文件<br><img src="https://upload-images.jianshu.io/upload_images/4415838-b07fb389a3600c6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="582FD503-714E-4426-898A-BC114FE0F1CA.png"></p><p>(d)静态（static）不能使用 extern并存，<br>(e)可以<img src="https://upload-images.jianshu.io/upload_images/4415838-fca557bf81b6c911.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B29F2499-1A81-44A2-BE48-CFF4EB437E47.png"><br>虽然不报错，但是违背了static 的初衷 <strong><em>？</em></strong>static的左右就是在文件内部使用</p><p><a href="https://blog.csdn.net/mango_ios/article/details/52686892" target="_blank" rel="noopener">来源 https://blog.csdn.net/mango_ios/article/details/52686892</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#位置一&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
      <category term="基础" scheme="http://my.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="编程基础" scheme="http://my.com/tags/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>第一批</title>
    <link href="http://my.com/2019/10/23/hello-world/"/>
    <id>http://my.com/2019/10/23/hello-world/</id>
    <published>2019-10-22T17:36:27.715Z</published>
    <updated>2019-10-24T16:11:22.468Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
